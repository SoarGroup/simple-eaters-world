sp {hierarchical-SMEM*propose*evaulate-move
   (state <s> ^impasse tie
              ^item <o1>
              ^item <o2>
              ^item <o3>
              ^item <o4>
              ^superstate <ss>)
   (<o1> ^name move
         ^dir north)
   (<o2> ^name move
         ^dir south)
   (<o3> ^name move
         ^dir east)
   (<o4> ^name move
         ^dir west)
-->
   (<s> ^operator <o> + >)
   (<o> ^name evaluate-move
        ^top-state <ss>)
}

sp {hierarchical-SMEM*evaluate-move*propose*evaluate*no-value
   (state <s> ^name evaluate-move
              ^top-state <ts>)
   (<ts> ^operator <o> +)
   (<o> ^name move
        ^dir <dir>
        ^map-object <map-object>
        ^value nil)
   (<ts> ^smem.command <cmd>)
  -{(<cmd> ^store <r>)
    (<r> ^<map-object> <v>)}
-->
   (<s> ^operator <op> + =)
   (<op> ^name evaluate
         ^dir <dir>
         ^map-object <map-object>
         ^<map-object> 0)
}

sp {hierarchical-SMEM*evaluate-move*propose*evaluate*value
   (state <s> ^name evaluate-move
              ^top-state <ts>)
   (<ts> ^operator <o> +)
   (<o> ^name move
        ^dir <dir>
        ^map-object <map-object>
        ^value nil)
   (<ts> ^smem.command <cmd>)
   (<cmd> ^store <r>)
   (<r> ^<map-object> <v>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name evaluate
         ^dir <dir>
         ^map-object <map-object>
         ^<map-object> <v>)
}

sp {hierarchical-SMEM*evaluate-move*apply*evaluate
   (state <s> ^name evaluate-move
              ^top-state <ts>
              ^operator <op> +)
   (<op> ^name evaluate
         ^dir <dir>
         ^map-object <map-object>
         ^<map-object> <v>)
   (<ts> ^operator <o> +
         ^smem.command <cmd>)
   (<o> ^dir <dir>)
-->
   (<cmd> ^retrieve <v>)
   (<ts> ^operator <o> = <v>)
   (<o> ^reward <v>)
}